Î» python
Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from flask_blog import db
C:\Users\SIDDHESH\AppData\Local\Programs\Python\Python37\lib\site-packages\flask_sqlalchemy\__init__.py:834: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
>>> db.create_all()
>>> from flask_blog import User, Post
>>> user_1 = User(username='Corey', email='c@demo.com', password='password')
>>> db.session.add(user_1)
>>> user_2 = User(username='John', email='j@demo.com', password='password')
>>> db.session.add(user_2)
>>> db.session.commit()
>>> User.query.all()
[User('Corey', 'c@demo.com', 'default.jpg'), User('John', 'j@demo.com', 'default.jpg')]
>>> User.query.first()
User('Corey', 'c@demo.com', 'default.jpg')
>>> User.query.filter_by(username='Corey').all()
[User('Corey', 'c@demo.com', 'default.jpg')]
>>> User.query.filter_by(username='Corey').first()
User('Corey', 'c@demo.com', 'default.jpg')
>>> user = User.query.filter_by(username='Corey').first()
>>> user
User('Corey', 'c@demo.com', 'default.jpg')
>>> user.id
1
>>> user = User.query.get(1)
>>> user
User('Corey', 'c@demo.com', 'default.jpg')
>>> user.posts
[]
>>> user.id
1
>>> post_1 = Post(title='Blog 1', content='First Post Content', user_id=user.id)
>>> post_2 = Post(title='Blog 2', content='Second Post Content', user_id=user.id)
>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.session.commit()
>>> user.posts
[Post('Blog 1', '2020-12-20 02:52:20.674785'), Post('Blog 2', '2020-12-20 02:52:20.676781')]
>>> for post in user.posts:
...     print(post.title)
...
Blog 1
Blog 2
>>> post = Post.query.first()
>>> post
Post('Blog 1', '2020-12-20 02:52:20.674785')
>>> post.user_id
1
>>> post.author
User('Corey', 'c@demo.com', 'default.jpg')
>>> db.drop_all()
>>> db.create_all()
>>> User.query.all()
[]
>>> Post.query.all()
[]